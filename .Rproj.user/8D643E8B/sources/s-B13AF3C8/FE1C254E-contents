---
output: 
  html_document: 
    theme: yeti
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      comment = "#>",
                      collapse = TRUE)
```

# Day 1

## Hunting Error messages 

The internet is your friend `r emo::ji("smile")`.

The language of the current `R` session can be changed to english using `Sys.setenv()`
(this only worked *once per session* for me --- so to toggle back to my initial language I had to restart the r-session) 

```{r, eval = FALSE}
Sys.setenv(LANGUAGE="de")
x
Sys.setenv(LANGUAGE="en")
x
```

## Basic Data Types 

```
   Logical  --->  Integer  --->  Numeric  --->  Character
[FALSE, TRUE]     [0, 1]       [0.0, 1.0]    [“0.0”, “1.0”]
```

```{r}
a <- TRUE 
c <- 1
class(c)
b <- as.integer(1)
class(b)
a + c
d <- "1"
as.numeric("1")
as.numeric("TRUE")
c == d
a == c
a == d
identical(c, d)
identical(a, c)
2 == 3
```
## Basic Data Structures

```
         1D            Row/Column         2D
    Atomic Vectors ------------------> Matrices
          |                                |
recursive |                                | Properties Of
          |                                |
        Lists <--------------------- Data Frames
                    Properties Of
```

### Atomic Vectors

```{r}
weight_g <- c(50, 60, 65, 80)
weight_g

animals <- c("kinkajous", "coatis", "capuchins")
animals

empty <- vector(length = 5)
empty

length(weight_g)
length(animals)

str(weight_g)

num_char <- c(1, 2, 3, "a") 
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")

num_char
```

Subsetting
```{r}
animals[2]
animals[c(2,3)]
weight_g[2:4]

2:4

weight_g[c(2, 2, 2, 3)]
weight_g[-2]
```

### Conditional Subsetting

```{r}
weight_g > 50
weight_g[weight_g > 50]

weight_g[weight_g > 50 & weight_g < 70]
weight_g[weight_g <= 50 | weight_g >= 70]

animals2 <- c("kinkajous", "kinkajous", "coatis", "meerkats")

animals2 %in% c(animals)
animals2[animals2 %in% c(animals)]
```

### Matrices

```{r}
sequence_vector <- 1:9
sequence_vector

example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol = 3)
example_matrix1

example_matrix2 <- matrix(sequence_vector, 3, byrow = TRUE)
example_matrix2

str(example_matrix1)
str(example_matrix2)

length(example_matrix1)
dim(example_matrix1)
nrow(example_matrix1)
ncol(example_matrix1)

example_matrix1[4:7] # ! not a helpful way to subset matrices
example_matrix1[2, 3] # example_matrix1[<rows>, <columns>]

example_matrix1[2:3, c(1, 3)]
```

### Lists

```{r}
animals_all <- list(animals, animals2)
animals_all

animals_all[1]
str(animals_all)
str(animals_all[1])

animals_all[[1]]

animals_all_combined <- c(animals_all, weight_g) # for demonstration purpose
animals_all_combined

animals_all_combined <- c(animals_all, list(weight_g))
animals_all_combined

list_challange1 <- animals_all_combined[1][1]
list_challange2 <- animals_all_combined[[c(1,2)]]
list_challange1
list_challange2
```

---
